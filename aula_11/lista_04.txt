class Contato:
    def __init__(self, i, n, e, f):
        self.__id = i
        self.__nome = n
        self.__email = e
        self.__fone = f
    def get_id(self):
        return self.__id
    def get_nome(self):
        return self.__nome
    def get_email(self):
        return self.__email
    def get_fone(self):
        return self.__fone
    def __str__(self):
        return f"{self.__id} - {self.__nome} - {self.__email} - {self.__fone}"

class ContatoUI:
    __contatos = []
    @classmethod
    def main(cls):
        op = 0
        while op != 6:
            op = ContatoUI.menu()
            if op == 1: ContatoUI.inserir()
            if op == 2: ContatoUI.listar()
            if op == 3: ContatoUI.atualizar()
            if op == 4: ContatoUI.excluir()
            if op == 5: ContatoUI.pesquisar()
    @classmethod
    def menu(cls):
        print("1 - Inserir | 2 - Listar | 3 - Atualizar | 4 - Excluir | 5 - Pesquisar | 6 - Fim")
        return int(input("Escolha uma opção:"))
    @classmethod
    def inserir(cls):
        id = int(input("Informe o id do contato:"))
        nome = input("Informe o nome do contato:")
        email = input("Informe o email do contato:")
        fone = input("Informe o telefone do contato:")
        C = Contato(id, nome, email, fone)
        cls.__contatos.append(C)
    @classmethod
    def listar(cls):
        #print (cls.__contatos)
        for c in cls.__contatos:
            print(c)
    @classmethod
    def atualizar(cls):
        id = int(input("Qual é o id que você deseja atualizar? "))
        for i in cls.__contatos:
            if i.get_id() == id:
                print(i)
                nome = input("Nome atualizado: ")
                email = input("Email atualizado: ")
                fone = input("Telefone atualizado: ")
                y = Contato(id, nome, email, fone)
                cls.__contatos.remove(i)
                cls.__contatos.append(y)
                break
        else:
            print("Contato com esse ID não foi encontrado.")
            
    @classmethod
    def excluir(cls):
        cls.listar()
        id = int(input("Qual é o id do contato que você deseja excluir? "))
        for i in cls.__contatos:
            if i.get_id() == id:
                cls.__contatos.remove(i)
    @classmethod
    def pesquisar(cls):
        nome = input("Informe o nome:")
        for c in cls.__contatos:
            if c.get_nome().startswith(nome): print(c)

ContatoUI.main()


class Pais:
    def __init__(self, i, n, p, a):
        self.__id = i
        self.__nome = n
        self.__pop = p
        self.__area = a
    def get_id(self):
        return self.__id
    def get_nome(self):
        return self.__nome
    def get_pop(self):
        return self.__pop
    def get_area(self):
        return self.__area
    def __str__(self):
        return f"{self.__id} - {self.__nome} - {self.__pop} - {self.__area}"

class Pais:
    def __init__(self, i, n, p, a):
        self.__id = i
        self.__nome = n
        self.__pop = p
        self.__area = a
    def get_id(self):
        return self.__id
    def get_nome(self):
        return self.__nome
    def get_pop(self):
        return self.__pop
    def get_area(self):
        return self.__area
    def densidade(self):
        return self.__pop / self.__area
    def __str__(self):
        return f"{self.__id} - {self.__nome} - {self.__pop} - {self.__area}"

class PaisUI:
    __paises = []
    @classmethod
    def main(cls):
        op = 0
        while op != 7:
            op = PaisUI.menu()
            if op == 1: PaisUI.inserir()
            if op == 2: PaisUI.listar()
            if op == 3: PaisUI.atualizar()
            if op == 4: PaisUI.excluir()
            if op == 5: PaisUI.maispopuloso()
            if op == 6: PaisUI.maispovoado()
    @classmethod
    def menu(cls):
        print("1 - Inserir | 2 - Listar | 3 - Atualizar | 4 - Excluir | 5 - Mais populoso | 6 - Mais povoado | 7 - Fim")
        return int(input("Escolha uma opção:"))
    @classmethod
    def inserir(cls):
        id = int(input("Informe o id do país:"))
        nome = input("Informe o nome do país:")
        pop = int(input("Informe a população do país:"))
        area = int(input("Informe a área do país:"))
        P = Pais(id, nome, pop, area)
        cls.__paises.append(P)
    @classmethod
    def listar(cls):
        #print (cls.__paises)
        for p in cls.__paises:
            print(p)
    @classmethod
    def atualizar(cls):
        id = int(input("Qual é o id do país que você deseja atualizar? "))
        for i in cls.__paises:
            if i.get_id() == id:
                print(i)
                nome = input("Nome atualizado: ")
                pop = int(input("População atualizada: "))
                area = int(input("Área atualizada: "))
                y = Pais(id, nome, pop, area)
                cls.__paises.remove(i)
                cls.__paises.append(y)
                break
        else:
            print("País com esse ID não foi encontrado.")
            
    @classmethod
    def excluir(cls):
        id = int(input("Qual é o id do país que você deseja excluir? "))
        for i in cls.__paises:
            if i.get_id() == id:
                cls.__paises.remove(i)
    @classmethod
    def maispopuloso(cls):
        maispop = cls.__paises[0]
        for c in cls.__paises[1:]:
            if c.get_pop() > maispop.get_pop():
                maispop = c
        print(f"País mais populoso: {maispop.get_nome()}, com população de {maispop.get_pop()} habitantes.")

    @classmethod
    def maispovoado(cls):
        maispov = cls.__paises[0]
        for p in cls.__paises[1:]:
            densidade_atual = p.densidade()
            densidade_maior = maispov.densidade()
            if densidade_atual > densidade_maior:
                maispov = p
        densidade = maispov.densidade()
        print(f"País mais povoado: {maispov.get_nome()} (densidade: {densidade:.2f} hab/km²)")

PaisUI.main()

import random
class Bingo:
    def __init__(self, num_bolas):
        self.__num_bolas = num_bolas
        if num_bolas < 5: raise ValueError("Num mínimo de bolas é 5.")
        self.__bolas = []
    def sortear(self):
        if len(self.__bolas) == self.__num_bolas:
            return -1
        s = random.randint(1, self.__num_bolas)
        while s in self.__bolas:
            s = random.randint(1, self.__num_bolas)
        self.__bolas.append(s)
        return s
    def sorteados(self):
        return sorted(self.__bolas)

class BingoUI:
    @staticmethod
    def main():
        op = 0
        jogo = None
        while op != 4:
            op = BingoUI.menu()
            if op == 1: jogo = BingoUI.iniciar_jogo()
            if op == 2 and jogo != None: BingoUI.sortear(jogo)
            if op == 3 and jogo != None: BingoUI.sorteados(jogo)
            elif jogo == None: raise ValueError("Você deve iniciar o jogo antes.")
    @staticmethod
    def menu():
        print("1 - Iniciar jogo | 2 - Sortear | 3 - Sorteados | 4 - Fim")
        return(int(input("Escolha uma opção: ")))
    @staticmethod
    def iniciar_jogo():
        jogo = Bingo(int(input("Informe o número de bolas: ")))
        return jogo
    @staticmethod
    def sortear(jogo):
        print(jogo.sortear())
    @staticmethod
    def sorteados(jogo):
        print(jogo.sorteados())

BingoUI.main()

